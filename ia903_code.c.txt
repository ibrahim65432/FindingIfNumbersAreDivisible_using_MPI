
#include <stdio.h>
#include <mpi.h>  // This is the header file for MPI functions
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>

char* printArray(int* arr, int count){
        char str = malloc(count*sizeof(strlen("11111 ")));
        char buffer = malloc(sizeof(char)*sizeof(int)*4+1);
        for(int i = 0; i < count; i++){
                sprintf(buffer, "%d ", i);
                strcat(str, buffer);
        }
        return str;

}


int main(int argc, char* argv[]){

        int myId, numProc;
        MPI_Init(&argc, &argv);
        MPI_Comm_size(MPI_COMM_WORLD, &numProc);
        MPI_Comm_rank(MPI_COMM_WORLD, &myId);
        MPI_Status status;
        FILE* fp;
        char filename[100] = "";
        int* total_values;


        int last_count = 0;
        int N = (unsigned int) atoi(argv[1]);
        int a = (unsigned int) atoi(argv[2]);
        int b = (unsigned int) atoi(argv[3]);
        int c = (unsigned int) atoi(argv[4]);

        total_values = malloc(N*sizeof(int));

        char* buffer = malloc(sizeof(char)*sizeof(int)*4+1);
       // clock_t time_req;

       // char* str = malloc(N*sizeof(strlen("111111 ")));
       // int* partial_total = malloc((N/numProc)*sizeof(int));
       // int* total = malloc(N*sizeof(int));

        if(myId!=0 && myId!=numProc-1){
                int partial_N = (N/numProc)*myId;
                int all_values[N/numProc];
                int count = 0;
                for(int i = partial_N; i < (partial_N+(N/numProc)); i++){
                        if (i % a == 0) {
                                total_values[i] = 1;
                                count++;
                               //sprintf(buffer, "%d ", i);
                               // strcat(str, buffer);
                        } else if (i % b == 0) {
                                total_values[i] = 1;
                                count++;
                                //sprintf(buffer, "%d ", i);
                                //strcat(str, buffer);
                        } else if (i % c == 0) {
                                total_values[i] = i;
                                count++;
                                //sprintf(buffer, "%d ", i);
                                //strcat(str, buffer);
                        }
                }
//              printf("%s <- CHECK HERE 2 ", printArray(all_values, count));

        //      MPI_Send(&count, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
        //      MPI_Send(&all_values, count, MPI_INT, 0, 0, MPI_COMM_WORLD);
                //MPI_Send(&str, count, MPI_BYTE, 0, 0, MPI_COMM_WORLD);
//              free(str);
        }
        else if(myId > 0 && myId == numProc-1){
                int partial_N = ((N/numProc)*myId);
                int count = 0;
                int all_values[(N/numProc) +(N%numProc)];
                for(int i = partial_N; i < N; i++){
                        if (i % a == 0) {
                                total_values[i] = 1;
                                count++;
                                //sprintf(buffer, "%d ", i);
                                //strcat(str, buffer);
                        } else if (i % b == 0) {
                                total_values[i] = 1;
                                count++;
                               // sprintf(buffer, "%d ", i);
                               // strcat(str, buffer);
                        } else if (i % c == 0) {
                                total_values[i] = 1;
                                count++;
                               // sprintf(buffer, "%d ", i);
                               // strcat(str, buffer);
                        }
                }
                //printf("%s <- CHECK HERE 3 ", printArray(all_values, count));

                //MPI_Send(&count, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
                //MPI_Send(&all_values, count, MPI_INT, 0, 0, MPI_COMM_WORLD);

                //MPI_Send(&str, count, MPI_BYTE, 0, 0, MPI_COMM_WORLD);
        }
        else{

                char total_values[N];
                for(int i = 2; i < (N/numProc)+ 1; i++){
                        if (i % a == 0) {
                                total_values[i] = 1;
                                last_count++;
                                printf("%d value\n", i);
                                //sprintf(buffer, "%d ", i);
                                //strcat(str, buffer);
                        } else if (i % b == 0) {
                                total_values[i] = 1;
                                last_count++;
                                printf("%d value\n", i);
                                //sprintf(buffer, "%d ", i);
                                //strcat(str, buffer);
                        } else if (i % c == 0) {
                                total_values[i] = 1;
                                last_count++;
                                printf("%d value\n", i);
                                //sprintf(buffer, "%d ", i);
                                //strcat(str, buffer);
                        }
                }
        //      for(int i = 0; i < last_count; i++){
        //              printf("%d check! \n", total_values[i]);
        //      }

                //printf("%s <- Master string ", total_values);
                //char* temp = malloc(N*sizeof(strlen("11 ")));


                /*for(int i = 1; i < numProc; i++){
                        //printf("HELLO\n");
                        //int count;
                        //MPI_Recv(&count, 1, MPI_INT, i, 0, MPI_COMM_WORLD,
                                        MPI_STATUS_IGNORE);
                        //char all[count];
                        //MPI_Recv(&all, count, MPI_BYTE, i , 0,
                          //              MPI_COMM_WORLD,MPI_STATUS_IGNORE);
                        //for(int j = 0; j < count; j++){
                                total_values[last_count] = all[j];
                                last_count++;
                        }

                } */
                //printf("%s <- All string    ", str);

                //char* buffer = malloc(sizeof(char)*sizeof(int)*4+1);
                //snprintf(filename, sizeof(filename), "%i.txt",N);

                strcpy(filename, argv[1]);
                strcat(filename, ".txt");

                if(! (fp  = fopen(filename, "w + t"))){
                        printf("Cannot create file %s\n", filename);
                        exit(1);
                }

                for(int i = 2; i <= N; i++){
                        if(total_values[i]){
                                fprintf(fp, "%d ", i);
                        }
                }

                fclose(fp);

//                //printf("%s <- CHECK HERE 4",printArray(total_values, last_count));
        }

        MPI_Finalize();
        return 0;
}

